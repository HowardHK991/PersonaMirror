──────────────────────────
项目名称（暂定）：PersonaMirror  
一句话 Slogan：让大模型每一次回答，都像认识你十年  
角色：Chrome 插件 + CLI + 云端版本仓  
──────────────────────────
一、产品定位
1. 目标  
   在 KIMI、DeepSeek、ChatGPT 等 Web 端聊天之前，一键注入「跨会话个人侧写」，使大模型对用户意图、知识盲区、语境偏好有持续记忆，回答精度逼近“私人助理”。  
2. 与 iforgot.ai 的差异/互补  
   • iforgot.ai 重“记录-回忆”，本质是浏览器书签+语义索引；  
   • PersonaMirror 重“提炼-压缩-注入”，把碎片对话蒸馏成“可版本化、可热插拔”的微型知识库，让任何大模型都能立即加载。  
3. 使用场景  
   • 每天 23:55 自动增量刷新侧写 → 次日 0:00 所有模型同步；  
   • 面试准备：把历年面试对话注入 DeepSeek，让它帮你押题；  
   • 论文写作：把三年文献问答注入 KIMI，让它实时补全引用。  

──────────────────────────
二、总体架构
```
┌─────────────────────────┐
│        Chrome 插件       │  ← 用户主入口
├────┬──────────┬─────────┤
│CS │BG │Content│SidePanel│
│   │   │Script │         │
└───┴─────  ────┴─────────┘
         ▲(WebScraping)
         │
┌────────┴────────┐
│  PersonaCore    │  ← 浏览器外独立进程 (Rust/WASM)
│  ·TextExtractor │    负责 DOM→Markdown、语义切分、
│  ·Embedder      │    Embedding、Chunking、加密
│  ·Differ        │    与本地 Git 仓 diff & merge
└────────┬────────┘
         │
┌────────┴────────┐
│  StorageLayer   │  ← 本地 IndexedDB + Git 仓
│  ·RawQA         │    raw_qa/yyyy-mm-dd/*.jsonl.zst
│  ·PersonaDelta  │    persona_delta/*.md
│  ·Snapshot      │    snapshot/v1.3.0/persona.json
└────────┬────────┘
         │
┌────────┴────────┐
│  FormatBridge   │  ← 生成多模型可识别的“注入格式”
│  ·KimiMarkdown  │    兼容 Kimi「长文阅读」
│  ·DeepSeekCtx   │    兼容 DeepSeek「用户自定义指令」
│  ·OpenAIPlugin  │    以 Plugin 形式提供
└─────────────────┘
```

──────────────────────────
三、数据模型
1. RawQA（原始记录）  
   ```jsonl
   {"ts":1719240000,"url":"https://kimi.moonshot.cn/...","role":"user","text":"帮我总结量子霸权..."}
   {"ts":1719240002,"role":"assistant","text":"量子霸权..."}
   ```
2. PersonaDelta（语义提炼）  
   Markdown Front-matter + 正文  
   ```markdown
   ---
   tags: [quantum, paper-review]
   embeddings: [-0.12,0.34,...]
   last_update: 2025-07-24
   ---
   我关注量子霸权的核心是「可验证性」...
   ```
3. Snapshot（可注入版本）  
   单文件 ≤ 200 KB（Kimi 单次最大阅读限制），目录树：  
   ```
   snapshot/v1.3.0/
     ├── persona.json         # 压缩后的结构化数据
     ├── persona.md           # 人类可读
     └── manifest.yaml        # 版本信息 & checksum
   ```

──────────────────────────
四、关键实现细节
1. 自动浏览 & 抓取  
   • Content Script 监听 `window.postMessage` 判断对话结束（Kimi 的“停止”按钮消失、DeepSeek 的“复制”按钮出现）。  
   • 使用 `chrome.debugger` 高权限模式读取 Shadow DOM，避免被前端框架动态渲染干扰。  
2. 语义压缩算法  
   • 两阶段：  
     ① 用轻量 Transformer（all-MiniLM-L6-v2）做句子级嵌入；  
     ② 基于最大边际相关性(MMR)选 Top-k 片段，确保多样性。  
   • 敏感信息识别（邮箱、手机号）自动打码。  
3. 版本管理  
   • 本地 Git 仓（隐藏目录 `.persona_mirror`），每次增量 commit message 自动生成：  
     `Auto: 7 new QA chunks, 3 persona updates (diff +12/-5 lines)`  
   • CLI 提供 `persona diff v1.2.0..v1.3.0 --stat`。  
4. 注入机制  
   • Kimi：注入到「长文阅读」输入框，自动@文档。  
   • DeepSeek：注入到「自定义指令」文本区，支持占位符 `{{persona}}`。  
   • 其他：提供 HTTP API `/inject` 供本地模型调用。  
5. 手动微调  
   • SidePanel 打开 Markdown 编辑器（Monaco），实时预览压缩率。  
   • “一键回滚”按钮，撤销最近一次自动合并。  

──────────────────────────
五、用户安装 & 快速上手
1. 安装  
   • Chrome 商店搜索 “PersonaMirror” → 安装 → 固定图标。  
   • 首次点击 → 授权“读取所有网页数据”(仅 KIMI/DeepSeek 域名白名单)。  
2. 初始化  
   • 选择“新建仓库目录”或“关联已有 Git 仓”。  
   • 设置压缩策略：保守(≤100KB) / 平衡(≤200KB) / 激进(≤50KB)。  
3. 日常流程  
   ① 正常与 KIMI/DeepSeek 聊天；  
   ② PersonaMirror 图标显示“✅ 已捕获 3 条新对话”；  
   ③ 点击“立即生成 delta”；  
   ④ 次日打开新标签页，自动出现“是否注入最新侧写？”提示。  
4. 高级  
   • CLI（npm -g persona-mirror-cli）  
     ```
     persona pull v1.3.0
     persona edit --tag quantum
     persona export --format openai
     ```

──────────────────────────
六、Roadmap
MVP（2 周）  
   • 仅支持 KIMI，单仓库，手动触发刷新。  
V1.0（4 周）  
   • DeepSeek 支持、自动定时、Git 版本、SidePanel 微调。  
V1.5（8 周）  
   • 多设备云同步（端到端加密）、Web 版可视化 diff、插件市场。  
V2.0（未来）  
   • 联邦学习：允许用户自愿上传匿名 embedding 训练“通用人格模板”。  

──────────────────────────
七、隐私 & 合规声明
• 所有原始对话仅本地存储，不上传服务器。  
• 加密：IndexedDB 使用 Web Crypto AES-256-GCM，密钥由用户口令派生。  
• 注入时仅传输压缩后的侧写，不包含原始对话。  
• 开源 GPL-3.0，代码可审计。

──────────────────────────
八、README.md（可直接贴 GitHub）
```
# PersonaMirror  
> Your memory for every LLM

## Quick Start
1. Install from [Chrome Web Store](...)  
2. Chat with KIMI → watch the badge counter go up  
3. Click "Build Snapshot" → copy `snapshot/v1.x.x/persona.md` into Kimi's long-context box  

## CLI
```bash
npm i -g persona-mirror-cli
persona --help
```

## Development
```bash
git clone git@github.com:xxx/persona-mirror.git
pnpm dev        # HMR for extension
pnpm test:core  # Rust unit tests
```

## License
GPL-3.0 © 2025 PersonaMirror Team
```

──────────────────────────
九、一分钟演示 GIF（文字描述）
1. 用户与 KIMI 聊“如何优雅地用 Rust 写链表”。  
2. 插件图标数字从 0→3。  
3. 用户点击图标 → “Build Snapshot” → 弹出 Toast：“v1.3.0 已就绪，大小 167 KB”。  
4. 新标签打开 DeepSeek，自动在输入框出现 `/inject persona:v1.3.0`。  
5. 用户问：“再给我 3 个链表技巧”，DeepSeek 回答直接引用上次 KIMI 里提到的 `Arc<Mutex<Node<T>>>` 陷阱。  

──────────────────────────
十、一句话总结
把“聊天记录”炼成“可热插拔的灵魂”，让任何大模型瞬间变成你的老朋友。

──────────────────────────
十一、原始需求（最高解释权）
目前学界已经认可上下文工程决定了LLM输出结果的质量上限，我在思考能否制作一个工具，可以自动浏览像KIMI、Deepseek的网页前端页面，然后生成类似长截图（或者其他文件形式）的跨会话形式的个人侧写信息的镜像；这个镜像包含了大量的个人信息，相当一个个人的微型知识库；而在每次与KIMI、DeepSeek聊天之前就可以先传送这个个人侧写镜像，再问问问题，获得极其精准的定制化回答。这个镜像制作工具可以自动化刷新信息（基于每天新增的Q&A），可以生成市面上大模型们都可以识别的数据格式，可以进行版本管理，支持手动微调。你需要深度思考这个项目的要求并结合iforgot.ai的优点（它的实现思路和功能等）给出最终的方案


